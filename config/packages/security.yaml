security:
    encoders:
        FOS\UserBundle\Model\UserInterface: bcrypt
        App\Entity\User\User: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:

        in_memory: { memory: null }

        fos_userbundle:
            id: fos_user.user_provider.username
            
        app_user_provider:
            entity:
                class: App\Entity\User\User
                property: email
            
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_login:
            pattern:  ^/authentication
            stateless: true
            anonymous: true
            provider:  app_user_provider
            json_login:
                check_path: /authentication_token
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        
        api:
            pattern:   ^/api/             # protected path
            stateless: true
            provider:  app_user_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        
        # -> custom firewall for the admin area of the URL
        admin:
            pattern:            /admin(.*)
            context:            user
            form_login:
                provider:       fos_userbundle
                login_path:     /admin/login
                use_forward:    false
                check_path:     /admin/login_check
                failure_path:   null
                success_handler: sonata.user.google.authenticator.success_handler
            logout:
                path:           /admin/logout
                target:         /admin/login
            anonymous:          true
            switch_user:
                provider: fos_userbundle
                role: ROLE_ALLOWED_TO_SWITCH
                # parameter: _switch_user

        main_user:
            pattern:            /account(.*)
            anonymous: lazy
            provider:  app_user_provider
            guard:
                authenticators:
                    - App\Security\User\LoginFormAuthenticator
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /
            form_login:
                login_path:     security_login
                check_path:     /account/login_check
                use_referer: true
            logout:
                path: app_logout
                target: /account/login
            # if you want, disable storing the user in the session
            # stateless: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        
        - { path: ^/account/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/account/register$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/account/logout$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/account/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Admin login page needs to be accessed without credential
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }

        - { path: ^/authentication_token, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,       roles: ROLE__USER }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: ROLE_ADMIN }
        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY }
        

    # Sonata "special" roles (ROLE_SONATA_ADMIN and ROLE_SUPER_ADMIN) are configurable
    role_hierarchy:

        # ROLE_SONATA_USER_ADMIN_USER_HISTORY

        ROLE_ADMIN:                     [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN:               [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    # set access_strategy to unanimous, else you may have unexpected behaviors
    access_decision_manager:
        strategy: unanimous
